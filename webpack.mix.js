const mix = require('laravel-mix');
require('laravel-mix-compress-images');

/*
 |--------------------------------------------------------------------------
 | Mix Asset Management
 |--------------------------------------------------------------------------
 |
 | Mix provides a clean, fluent API for defining some Webpack build steps
 | for your Laravel application. By default, we are compiling the Sass
 | file for your application, as well as bundling up your JS files.
 |
 */

mix
  .js('src/js/app.js', 'public_html/js/')
  .sass('src/sass/app.scss', 'public_html/css/')
  .setPublicPath('public_html')
  .extract(['vue'])
  .sourceMaps(true, 'source-map')
  // .babel(['public_html/js/manifest.js'], 'public_html/js/manifest.js')
  // .babel(['public_html/js/vendor.js'], 'public_html/js/vendor.js')
  // .babel(['public_html/js/app.js'], 'public_html/js/app.js')
  .copyDirectory('src/fonts', 'public_html/fonts')
  .copy('src/img/*.{jpg,JPG,jpeg,JPEG,png,PNG,svg}', 'public_html/img')
  .options({
    extractVueStyles: false,
    processCssUrls: false,
    purifyCss: false,
    terser: {},
    postCss: [
      require('autoprefixer')
    ],
  })
  // .compressImages(
  //   ['src/img\/**\/*.{jpg,JPG,jpeg,JPEG,png,PNG}'],
  //   '', {
  //     jpg: {
  //       engine: 'mozjpeg',
  //       command: ['-quality', '80']
  //     },
  //     png: {
  //       engine: 'pngquant',
  //       command: ['--quality=40-60']
  //     },
  //     svg: {
  //       engine: false,
  //       command: false
  //     },
  //     gif: {
  //       engine: false,
  //       command: false
  //     }
  //   }
  // )
  // his section override webpack config
  .webpackConfig({
    module: {
      rules: [
        // {
        //   test: /\.svg$/,
        //   use: ['babel-loader', 'vue-svg-loader'],
        // },
        // {
        //   test: /\.m?js$/,
        //   exclude: /node_modules/,
        //   use: {
        //     loader: 'babel-loader',
        //     options: {
        //       presets: ['@babel/preset-env'],
        //       plugins: ['@babel/plugin-transform-runtime']
        //     }
        //   }
        // }
      ]
    }
  });

// Full API
// mix.js(src, output);
// mix.react(src, output); <-- Identical to mix.js(), but registers React Babel compilation.
// mix.preact(src, output); <-- Identical to mix.js(), but registers Preact compilation.
// mix.coffee(src, output); <-- Identical to mix.js(), but registers CoffeeScript compilation.
// mix.ts(src, output); <-- TypeScript support. Requires tsconfig.json to exist in the same folder as webpack.mix.js
// mix.extract(vendorLibs);
// mix.sass(src, output);
// mix.less(src, output);
// mix.stylus(src, output);
// mix.postCss(src, output, [require('postcss-some-plugin')()]);
// mix.browserSync('my-site.test');
// mix.combine(files, destination);
// mix.babel(files, destination); <-- Identical to mix.combine(), but also includes Babel compilation.
// mix.copy(from, to);
// mix.copyDirectory(fromDir, toDir);
// mix.minify(file);
// mix.sourceMaps(); // Enable sourcemaps
// mix.version(); // Enable versioning.
// mix.disableNotifications();
// mix.setPublicPath('path/to/public');
// mix.setResourceRoot('prefix/for/resource/locators');
// mix.autoload({}); <-- Will be passed to Webpack's ProvidePlugin.
// mix.webpackConfig({}); <-- Override webpack.config.js, without editing the file directly.
// mix.babelConfig({}); <-- Merge extra Babel configuration (plugins, etc.) with Mix's default.
// mix.then(function () {}) <-- Will be triggered each time Webpack finishes building.
// mix.override(function (webpackConfig) {}) <-- Will be triggered once the webpack config object has been fully generated by Mix.
// mix.dump(); <-- Dump the generated webpack config object to the console.
// mix.extend(name, handler) <-- Extend Mix's API with your own components.
// mix.options({
//   extractVueStyles: false, // Extract .vue component styling to file, rather than inline.
//   globalVueStyles: file, // Variables file to be imported in every component.
//   processCssUrls: true, // Process/optimize relative stylesheet url()'s. Set to false, if you don't want them touched.
//   purifyCss: false, // Remove unused CSS selectors.
//   terser: {}, // Terser-specific options. https://github.com/webpack-contrib/terser-webpack-plugin#options
//   postCss: [] // Post-CSS options: https://github.com/postcss/postcss/blob/master/docs/plugins.md
// });
